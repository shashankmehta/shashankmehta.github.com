<button id="theme-toggle" class="layout25-theme-toggle" aria-label="Toggle dark/light mode" onclick="toggleTheme()">
  <svg class="layout25-theme-toggle-icon light-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
  <svg class="layout25-theme-toggle-icon dark-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
  <svg class="layout25-theme-toggle-icon system-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line></svg>
</button>

<script>
  // Toggle theme when button is clicked - cycle between light, dark, and system
  function toggleTheme() {
    const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');
    const html = document.documentElement;
    const currentTheme = localStorage.getItem('theme') || 'system';
    
    // First clear all classes
    html.classList.remove('light-mode', 'dark-mode', 'system-mode', 'light-appearance', 'dark-appearance');
    
    // Then set the new theme
    if (currentTheme === 'light') {
      // Light → Dark
      html.classList.add('dark-mode');
      localStorage.setItem('theme', 'dark');
    } else if (currentTheme === 'dark') {
      // Dark → System
      html.classList.add('system-mode');
      if (prefersDarkScheme.matches) {
        html.classList.add('dark-appearance');
      } else {
        html.classList.add('light-appearance');
      }
      localStorage.setItem('theme', 'system');
    } else {
      // System → Light
      html.classList.add('light-mode');
      localStorage.setItem('theme', 'light');
    }
  }
  
  // Listen for system preference changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
    if (document.documentElement.classList.contains('system-mode')) {
      document.documentElement.classList.remove('light-appearance', 'dark-appearance');
      if (event.matches) {
        document.documentElement.classList.add('dark-appearance');
      } else {
        document.documentElement.classList.add('light-appearance');
      }
    }
  });
</script> 